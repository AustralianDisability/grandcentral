<?php

/**
 * Implements hook_menu().
 */
function stored_views_menu() {
  $items = array();
  $items['stored-views/%stored_views_id/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stored_views_delete_confirm', 1),
    'access callback' => 'user_access',
    'access arguments' => array('manage stored views'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function stored_views_permission() {
  return array(
    'manage stored views' => array(
      'title' => t('manage stored views'),
      'description' => t('TODO Add a description for \'manage stored views\''),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function stored_views_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'stored_views') . '/views',
  );
}

/**
 * Implements hook_block_info().
 */
function stored_views_block_info() {
  $blocks = array();
  $blocks['save']['info'] = t('Save current view block');
  $blocks['save']['cache'] = BLOCK_CACHE_GLOBAL;
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function stored_views_block_view($delta) {
  if ($delta == 'save') {
    return _stored_views_block_save();
  }
}

/**
 * Implements hook_block().
 */
function stored_views_block_OLD($op = 'list', $delta = 0) { }

/**
 * Implements hook_theme().
 */
function stored_views_theme() {
  return array(
    'stored_views_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Theme function for stored_views_form().
 */
function theme_stored_views_form($variables) {
  $form = $variables['form'];
  return drupal_render_children($form);
}

/**
 * Create a save form.
 */
function stored_views_form($form, $form_state) {
  $form = array();
  $page_view = _stored_views_get_page_view();
  if ($stored = stored_views_load($page_view)) {
    $form['#delete'] = $stored;
    $form['description']['#value'] = '<div class="description">' . t('This view is in the list.') . '</div>';
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Remove'),
    );
  }
  else {
    $form['#save'] = $page_view;
    $form['description']['#value'] = '<div class="description">' . t('Add this view to the list') . '</div>';
    $form['status'] = array(
      '#type' => 'checkbox',
      '#title' => t('Promote'),
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add'),
    );
  }
  $form_state['#redirect'] = FALSE;
  return $form;
}

/**
 * Submit stored_views_form.
 */
function stored_views_form_submit($form, &$form_state) {
  if ($form['#save']) {
    $save = $form['#save'];
    $save['created'] = REQUEST_TIME;
    $save['status'] = $form_state['values']['status'];
    stored_views_save($save);
  }
  else {
    stored_views_delete($form['#delete']);
  }
  drupal_set_message(t('Change saved.'));

  // Redirect ourselves because '#redirect' does not support queries.
  $query = array();
  foreach ($_GET as $k => $v) {
    if ($k != 'q') {
      $query[] = "$k=$v";
    }
  }
  // TODO implode('&', $query) needs to be an array of keys and values instead of a string.
  drupal_goto($_GET['q'], array('query' => implode('&', $query)));
}

/**
 * Stored view delete confirmation form.
 */
function stored_views_delete_confirm($form, $form_state, $stored_view) {
  $form = array('stored_view' => array(
      '#type' => 'value',
      '#value' => $stored_view,
    ));
  $dest = drupal_get_destination();
  if ($dest) {
    $dest = explode('=', $dest);
    $url = $dest[1];
  }
  else {
    $url = '<front>';
  }
  return confirm_form($form, t('Are you sure you want to delete !stored_view?', array('!stored_view' => $stored_view['title'])), $url);
}

/**
 * Submit handler for confirm form.
 */
function stored_views_delete_confirm_submit($form, &$form_state) {
  $stored_view = $form_state['values']['stored_view'];
  stored_views_delete($stored_view);
  $form_state['redirect'] = '<front>';
}

/**
 * Save a stored view.
 *
 * @param $save
 *   array in the format
 *   array(
 *     'view' => 'view_name',
 *     'created' => <created time>,
 *     'display' => 'display_name',
 *     'arguments' => 'the/views/arguments',
 *     'filters' => 'the=views&fil=ters',
 *   )
 */
function stored_views_save($save) {
  stored_views_delete($save);
  drupal_write_record('stored_views', $save);
}


/**
 * Load a stored view.
 *
 * @param $load
 *   array in the format
 *   array(
 *     'view' => 'view_name',
 *     'path' => array('q' => 'path'),
 *     'arguments' => 'the/views/arguments',
 *     'filters' => 'the=views&fil=ters',
 *   )
 */
function stored_views_load($loads) {
  foreach ($loads as $nid => &$load) {
    $load = db_fetch_array(db_query('SELECT * FROM {stored_views} WHERE view = :view AND path = :path AND arguments = :arguments AND filters = :filters', array(':view' => $load['view'], ':path' => $load['path'], ':arguments' => serialize($load['arguments']), ':filters' => serialize($load['filters']))));
    if ($load) {
      $load['arguments'] = unserialize($load['arguments']);
      $load['filters'] = unserialize($load['filters']);
      return $load;
    }
    $node_additions = FALSE;
    foreach ($node_additions as $property => &$value) {
      $load->$property = $value;
    }
  }
}

/**
 * Menu loader by stored_view id.
 *
 * @param $id
 *   the numeric id for a stored view.
 */
function stored_views_id_load($id) {
  if (is_numeric($id)) {
    $load = db_fetch_array(db_query('SELECT * FROM {stored_views} WHERE id = :id', array(':id' => $id)));
    if ($load) {
      $load['arguments'] = unserialize($load['arguments']);
      $load['filters'] = unserialize($load['filters']);
      return $load;
    }
  }
  return FALSE;
}

/**
 * Remove a stored view.
 *
 * @param $delete
 *   array in the format
 *   array(
 *     'view' => 'view_name',
 *     'path' => array('q' => 'path'),
 *     'arguments' => 'the/views/arguments',
 *     'filters' => 'the=views&fil=ters',
 *   )
 */
function stored_views_delete($delete) {
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('DELETE FROM {stored_views} WHERE view = "%s" AND path = "%s" AND arguments = "%s" AND filters = "%s"', $delete['view'], $delete['path'], serialize($delete['arguments']), serialize($delete['filters'])) */
  db_delete('stored_views')
  ->condition('view', $delete['view'])
  ->condition('path', $delete['path'])
  ->condition('arguments', serialize($delete['arguments']))
  ->condition('filters', serialize($delete['filters']))
  ->execute();
}

/**
 * Helper function for getting current view and converting it into a stored view array.
 */
function _stored_views_get_page_view() {
  $page_view = views_get_page_view();
  if ($page_view) {
    $current = array();
    $current['title'] = drupal_get_title();
    $current['view'] = $page_view->view->name;
    $current['display'] = $page_view->display->id;
    // If we never store anything else than page views, storing path and argument + filters may be redundant.
    // Leave this for now.
    $current['path'] = $_GET['q'];
    $current['arguments'] = $page_view->view->args;
    $current['filters'] = array();
    if (!empty($page_view->exposed_input)) {
      $current['filters'] = $page_view->exposed_input;
    }
    else {
      foreach ($page_view->view->filter as $filter) {
        if ($filter->options['exposed']) {
          $current['filters'][$filter->options['expose']['identifier']] = $filter->value;
        }
      }
    }
  }
  return $current;
}

/**
 * Helper function for creating a save block.
 */
function _stored_views_block_save() {
  // Try to load current view first.
  if (user_access('manage stored views')) {
    return array(
      'subject' => '',
      'content' => drupal_get_form('stored_views_form'),
    );
  }
}
